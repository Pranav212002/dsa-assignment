 
#include<iostream>
#include<string>
#include<cstring>
#include<cstdlib>

using namespace std;
int op;

class node
{
public:
    char word[50], mean[50];
    node*left;
    node*right;
};

class BST
{
public:
    node*root;
    BST()
    {
        root=NULL;
    }

    void create();
    node*insert(node*, node*);
    void inorder(node*);
    void search(node*, char[]);
    void modify(node*,char[]);
    node *dlt(node*, char[]);
};

void BST::create()
{
    int op;
    node* temp;
    do
    {
        temp=new node;
        cout<<"Enter a word which you want to store in tree node: ";
        cin>>temp->word;
        cout<<"Enter a meaning: ";
        cin>>temp->mean;
        temp->left=NULL;
        temp->right=NULL;
        if(root==NULL)
        {
            root=temp;
        }
        else
        {
            insert(root,temp);
        }
        cout<<"Enter 1 to again insert a new node else enter any other number: ";
        cin>>op;
    }while(op==1);
}

node* BST::insert(node* root, node* temp)
{
    if(strcmp(temp->word, root->word)<0)
    {
        if(root->left==NULL)
        {
            root->left=temp;
        }
        else
        {
            insert(root->left,temp);
        }
    }
    else
    {
       if(root->right==NULL)
        {
            root->right=temp;
        }
       else
        {
            insert(root->right,temp);
        }
    }
return root;
}

void BST::inorder(node* temp)
{
    if(temp!=NULL)
    {
        inorder(temp->left);
        cout<<temp->word<<" : "<<temp->mean<<"\n";
        inorder(temp->right);
    }
}

void BST::search(node*temp,char src[])
{
    if(temp!=NULL)
    {
        if((strcmp(temp->word, src)== 0))
           {
               cout<<"\n Word Found ";
               cout<<"\n Word : "<<temp->word;
               cout<<"\n Meaning : "<<temp->mean<<"\n";
           }
        else if((strcmp(temp->word, src)!= 0))
            {
               if((strcmp(temp->word, src)< 0))
                  {
                      search(temp->right, src);
                  }
               else if((strcmp(temp->word, src)> 0))
                  {
                      search(temp->right, src);
                  }
            }
    }
    else
    {
        cout<<"Word not found!!";
    }
}

void BST::modify(node*temp, char src[])
{
    if(temp!=NULL)
    {
        if((strcmp(temp->word, src)== 0))
           {
               cout<<"\n Word Found ";
               cout<<"\n Enter new meaning of Word "<<temp->word<<" : ";
               cin>>temp->mean;
           }
        else if((strcmp(temp->word, src)!= 0))
            {
               if((strcmp(temp->word, src)< 0))
                  {
                      modify(temp->right, src);
                  }
               else if((strcmp(temp->word, src)> 0))
                  {
                      modify(temp->right, src);
                  }
            }
    }
    else
    {
        cout<<"Word not found!!";
    }
}

node* BST::dlt(node*root,char src[])
{
    if(root!= NULL)
    {
        if((strcmp(root->word , src))>0)
        {
            root->left=dlt(root->left, src);
        }
        else if((strcmp(root->word , src))<0)
        {
            root->right=dlt(root->right, src);
        }
        else
        {
            if(root->left==NULL && root->right==NULL)
            {
                delete(root);
                root=NULL;
            }
            else if(root->left==NULL)
            {
                node* temp=root;
                root=root->right;
                delete(temp);
            }
            else if(root->right==NULL)
            {
                node* temp=root;
                root=root->left;
                delete(temp);
            }
            else
            {
                node *temp=root->right;
                strcpy(root->word, temp->word);
                strcpy(root->mean, temp->mean);
                root->right=dlt(root->right,temp->word);
            }
        }
    }return root;
}

int main()
{
    BST b;
    int op;
    char src[100];
    while(1)
    {
        cout<<"\n ";
        cout<<"\n 1. Insert Binary Search Tree";
        cout<<"\n 2. Display Inorder";
        cout<<"\n 3. Search a particular word";
        cout<<"\n 4. Modify the meaning of word";
        cout<<"\n 5. Delete the word from Dictionary";
        cout<<"\n 6. Exit";

        cout<<"\n Enter your choice: ";
        cin>>op;
        switch(op)
        {
        case 1:
            b.create();
            break;

        case 2:
            cout<<"Inorder Traversal of Tree : \n";
            b.inorder(b.root);
            break;

        case 3:
            cout<<"\n Enter the word which you want to search in given tree: ";
            cin>>src;
            b.search(b.root , src);
            break;

        case 4:
            cout<<"\n Enter the word which you want to modify: ";
            cin>>src;
            b.modify(b.root , src);
            break;

        case 5:
            cout<<"Enter the word which you want to delete: ";
            cin>>src;
            b.dlt(b.root,src);
            break;

        case 6:
            exit(0);
            break;

        default:
            cout<<"\n Invalid Option!!";
            break;
        }
    }
}

